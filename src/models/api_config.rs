/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

/// ApiConfig : 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiConfig {
    /// Unknown, probably voice optimization testing
    #[serde(rename = "VoiceEnableDegradation")]
    pub voice_enable_degradation: bool,
    /// Unknown, probably voice optimization testing
    #[serde(rename = "VoiceEnableReceiverLimiting")]
    pub voice_enable_receiver_limiting: bool,
    /// VRChat's office address
    #[serde(rename = "address")]
    pub address: std::sync::Arc<str>,
    /// Public Announcements
    #[serde(rename = "announcements")]
    pub announcements: Vec<crate::models::ApiConfigAnnouncement>,
    /// Game name
    #[serde(rename = "appName")]
    pub app_name: std::sync::Arc<str>,
    /// Build tag of the API server
    #[serde(rename = "buildVersionTag")]
    pub build_version_tag: std::sync::Arc<str>,
    /// apiKey to be used for all other requests
    #[serde(rename = "clientApiKey")]
    pub client_api_key: std::sync::Arc<str>,
    /// Unknown
    #[serde(rename = "clientBPSCeiling")]
    pub client_bps_ceiling: i32,
    /// Unknown
    #[serde(rename = "clientDisconnectTimeout")]
    pub client_disconnect_timeout: i32,
    /// Unknown
    #[serde(rename = "clientReservedPlayerBPS")]
    pub client_reserved_player_bps: i32,
    /// Unknown
    #[serde(rename = "clientSentCountAllowance")]
    pub client_sent_count_allowance: i32,
    /// VRChat's contact email
    #[serde(rename = "contactEmail")]
    pub contact_email: std::sync::Arc<str>,
    /// VRChat's copyright-issues-related email
    #[serde(rename = "copyrightEmail")]
    pub copyright_email: std::sync::Arc<str>,
    /// Current version number of the Terms of Service
    #[serde(rename = "currentTOSVersion")]
    pub current_tos_version: i32,
    #[serde(rename = "defaultAvatar")]
    pub default_avatar: std::sync::Arc<str>,
    #[serde(rename = "deploymentGroup")]
    pub deployment_group: crate::models::DeploymentGroup,
    /// Version number for game development build
    #[serde(rename = "devAppVersionStandalone")]
    pub dev_app_version_standalone: std::sync::Arc<str>,
    /// Developer Download link
    #[serde(rename = "devDownloadLinkWindows")]
    pub dev_download_link_windows: std::sync::Arc<str>,
    /// Link to download the development SDK, use downloadUrls instead
    #[serde(rename = "devSdkUrl")]
    pub dev_sdk_url: std::sync::Arc<str>,
    /// Version of the development SDK
    #[serde(rename = "devSdkVersion")]
    pub dev_sdk_version: std::sync::Arc<str>,
    /// Version number for server development build
    #[serde(rename = "devServerVersionStandalone")]
    pub dev_server_version_standalone: std::sync::Arc<str>,
    /// Unknown, \"dis\" maybe for disconnect?
    #[serde(rename = "dis-countdown")]
    pub dis_countdown: std::sync::Arc<str>,
    /// Toggles if copying avatars should be disabled
    #[serde(rename = "disableAvatarCopying")]
    pub disable_avatar_copying: bool,
    /// Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the `system_avatar_access` Tag or `admin_avatar_access` Tag
    #[serde(rename = "disableAvatarGating")]
    pub disable_avatar_gating: bool,
    /// Toggles if the Community Labs should be disabled
    #[serde(rename = "disableCommunityLabs")]
    pub disable_community_labs: bool,
    /// Toggles if promotion out of Community Labs should be disabled
    #[serde(rename = "disableCommunityLabsPromotion")]
    pub disable_community_labs_promotion: bool,
    /// Unknown
    #[serde(rename = "disableEmail")]
    pub disable_email: bool,
    /// Toggles if Analytics should be disabled.
    #[serde(rename = "disableEventStream")]
    pub disable_event_stream: bool,
    /// Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the `system_feedback_access` Tag.
    #[serde(rename = "disableFeedbackGating")]
    pub disable_feedback_gating: bool,
    /// Unknown, probably toggles compilation of frontend web builds? So internal flag?
    #[serde(rename = "disableFrontendBuilds")]
    pub disable_frontend_builds: bool,
    /// Unknown
    #[serde(rename = "disableHello")]
    pub disable_hello: bool,
    /// Toggles if signing up for Subscriptions in Oculus is disabled or not.
    #[serde(rename = "disableOculusSubs")]
    pub disable_oculus_subs: bool,
    /// Toggles if new user account registration should be disabled.
    #[serde(rename = "disableRegistration")]
    pub disable_registration: bool,
    /// Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
    #[serde(rename = "disableSteamNetworking")]
    pub disable_steam_networking: bool,
    /// Toggles if 2FA should be disabled.
    #[serde(rename = "disableTwoFactorAuth")]
    pub disable_two_factor_auth: bool,
    /// Toggles if Udon should be universally disabled in-game.
    #[serde(rename = "disableUdon")]
    pub disable_udon: bool,
    /// Toggles if account upgrading \"linking with Steam/Oculus\" should be disabled.
    #[serde(rename = "disableUpgradeAccount")]
    pub disable_upgrade_account: bool,
    /// Download link for game on the Oculus Rift website.
    #[serde(rename = "downloadLinkWindows")]
    pub download_link_windows: std::sync::Arc<str>,
    #[serde(rename = "downloadUrls")]
    pub download_urls: Box<crate::models::ApiConfigDownloadUrlList>,
    /// Array of DynamicWorldRow objects, used by the game to display the list of world rows
    #[serde(rename = "dynamicWorldRows")]
    pub dynamic_world_rows: Vec<crate::models::DynamicContentRow>,
    #[serde(rename = "events")]
    pub events: Box<crate::models::ApiConfigEvents>,
    /// Unknown
    #[serde(rename = "gearDemoRoomId")]
    pub gear_demo_room_id: std::sync::Arc<str>,
    /// WorldID be \"offline\" on User profiles if you are not friends with that user.
    #[serde(rename = "homeWorldId")]
    pub home_world_id: std::sync::Arc<str>,
    /// Redirect target if you try to open the base API domain in your browser
    #[serde(rename = "homepageRedirectTarget")]
    pub homepage_redirect_target: std::sync::Arc<str>,
    /// WorldID be \"offline\" on User profiles if you are not friends with that user.
    #[serde(rename = "hubWorldId")]
    pub hub_world_id: std::sync::Arc<str>,
    /// VRChat's job application email
    #[serde(rename = "jobsEmail")]
    pub jobs_email: std::sync::Arc<str>,
    /// MOTD
    #[serde(rename = "messageOfTheDay")]
    pub message_of_the_day: std::sync::Arc<str>,
    /// VRChat's moderation related email
    #[serde(rename = "moderationEmail")]
    pub moderation_email: std::sync::Arc<str>,
    /// Unknown
    #[serde(rename = "moderationQueryPeriod")]
    pub moderation_query_period: i32,
    /// Used in-game to notify a user they aren't allowed to select avatars in private worlds
    #[serde(rename = "notAllowedToSelectAvatarInPrivateWorldMessage")]
    pub not_allowed_to_select_avatar_in_private_world_message: std::sync::Arc<str>,
    /// Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance
    #[serde(rename = "plugin")]
    pub plugin: std::sync::Arc<str>,
    /// Version number for game release build
    #[serde(rename = "releaseAppVersionStandalone")]
    pub release_app_version_standalone: std::sync::Arc<str>,
    /// Link to download the release SDK
    #[serde(rename = "releaseSdkUrl")]
    pub release_sdk_url: std::sync::Arc<str>,
    /// Version of the release SDK
    #[serde(rename = "releaseSdkVersion")]
    pub release_sdk_version: std::sync::Arc<str>,
    /// Version number for server release build
    #[serde(rename = "releaseServerVersionStandalone")]
    pub release_server_version_standalone: std::sync::Arc<str>,
    /// Link to the developer FAQ
    #[serde(rename = "sdkDeveloperFaqUrl")]
    pub sdk_developer_faq_url: std::sync::Arc<str>,
    /// Link to the official VRChat Discord
    #[serde(rename = "sdkDiscordUrl")]
    pub sdk_discord_url: std::sync::Arc<str>,
    /// Used in the SDK to notify a user they aren't allowed to upload avatars/worlds yet
    #[serde(rename = "sdkNotAllowedToPublishMessage")]
    pub sdk_not_allowed_to_publish_message: std::sync::Arc<str>,
    /// Unity version supported by the SDK
    #[serde(rename = "sdkUnityVersion")]
    pub sdk_unity_version: std::sync::Arc<str>,
    /// Server name of the API server currently responding
    #[serde(rename = "serverName")]
    pub server_name: std::sync::Arc<str>,
    /// VRChat's support email
    #[serde(rename = "supportEmail")]
    pub support_email: std::sync::Arc<str>,
    /// WorldID be \"offline\" on User profiles if you are not friends with that user.
    #[serde(rename = "timeOutWorldId")]
    pub time_out_world_id: std::sync::Arc<str>,
    /// WorldID be \"offline\" on User profiles if you are not friends with that user.
    #[serde(rename = "tutorialWorldId")]
    pub tutorial_world_id: std::sync::Arc<str>,
    /// Unknown
    #[serde(rename = "updateRateMsMaximum")]
    pub update_rate_ms_maximum: i32,
    /// Unknown
    #[serde(rename = "updateRateMsMinimum")]
    pub update_rate_ms_minimum: i32,
    /// Unknown
    #[serde(rename = "updateRateMsNormal")]
    pub update_rate_ms_normal: i32,
    /// Unknown
    #[serde(rename = "updateRateMsUdonManual")]
    pub update_rate_ms_udon_manual: i32,
    /// Unknown
    #[serde(rename = "uploadAnalysisPercent")]
    pub upload_analysis_percent: i32,
    /// List of allowed URLs that bypass the \"Allow untrusted URL's\" setting in-game
    #[serde(rename = "urlList")]
    pub url_list: Vec<std::sync::Arc<str>>,
    /// Unknown
    #[serde(rename = "useReliableUdpForVoice")]
    pub use_reliable_udp_for_voice: bool,
    /// Unknown
    #[serde(rename = "userUpdatePeriod")]
    pub user_update_period: i32,
    /// Unknown
    #[serde(rename = "userVerificationDelay")]
    pub user_verification_delay: i32,
    /// Unknown
    #[serde(rename = "userVerificationRetry")]
    pub user_verification_retry: i32,
    /// Unknown
    #[serde(rename = "userVerificationTimeout")]
    pub user_verification_timeout: i32,
    /// Download link for game on the Steam website.
    #[serde(rename = "viveWindowsUrl")]
    pub vive_windows_url: std::sync::Arc<str>,
    /// List of allowed URLs that are allowed to host avatar assets
    #[serde(rename = "whiteListedAssetUrls")]
    pub white_listed_asset_urls: Vec<std::sync::Arc<str>>,
    /// Unknown
    #[serde(rename = "worldUpdatePeriod")]
    pub world_update_period: i32,
    /// Currently used youtube-dl.exe hash in SHA-256-delimited format
    #[serde(rename = "player-url-resolver-hash")]
    pub player_url_resolver_hash: std::sync::Arc<str>,
    /// Currently used youtube-dl.exe version
    #[serde(rename = "player-url-resolver-version")]
    pub player_url_resolver_version: std::sync::Arc<str>,
}

impl ApiConfig {
    /// 
    pub fn new(voice_enable_degradation: bool, voice_enable_receiver_limiting: bool, address: std::sync::Arc<str>, announcements: Vec<crate::models::ApiConfigAnnouncement>, app_name: std::sync::Arc<str>, build_version_tag: std::sync::Arc<str>, client_api_key: std::sync::Arc<str>, client_bps_ceiling: i32, client_disconnect_timeout: i32, client_reserved_player_bps: i32, client_sent_count_allowance: i32, contact_email: std::sync::Arc<str>, copyright_email: std::sync::Arc<str>, current_tos_version: i32, default_avatar: std::sync::Arc<str>, deployment_group: crate::models::DeploymentGroup, dev_app_version_standalone: std::sync::Arc<str>, dev_download_link_windows: std::sync::Arc<str>, dev_sdk_url: std::sync::Arc<str>, dev_sdk_version: std::sync::Arc<str>, dev_server_version_standalone: std::sync::Arc<str>, dis_countdown: std::sync::Arc<str>, disable_avatar_copying: bool, disable_avatar_gating: bool, disable_community_labs: bool, disable_community_labs_promotion: bool, disable_email: bool, disable_event_stream: bool, disable_feedback_gating: bool, disable_frontend_builds: bool, disable_hello: bool, disable_oculus_subs: bool, disable_registration: bool, disable_steam_networking: bool, disable_two_factor_auth: bool, disable_udon: bool, disable_upgrade_account: bool, download_link_windows: std::sync::Arc<str>, download_urls: crate::models::ApiConfigDownloadUrlList, dynamic_world_rows: Vec<crate::models::DynamicContentRow>, events: crate::models::ApiConfigEvents, gear_demo_room_id: std::sync::Arc<str>, home_world_id: std::sync::Arc<str>, homepage_redirect_target: std::sync::Arc<str>, hub_world_id: std::sync::Arc<str>, jobs_email: std::sync::Arc<str>, message_of_the_day: std::sync::Arc<str>, moderation_email: std::sync::Arc<str>, moderation_query_period: i32, not_allowed_to_select_avatar_in_private_world_message: std::sync::Arc<str>, plugin: std::sync::Arc<str>, release_app_version_standalone: std::sync::Arc<str>, release_sdk_url: std::sync::Arc<str>, release_sdk_version: std::sync::Arc<str>, release_server_version_standalone: std::sync::Arc<str>, sdk_developer_faq_url: std::sync::Arc<str>, sdk_discord_url: std::sync::Arc<str>, sdk_not_allowed_to_publish_message: std::sync::Arc<str>, sdk_unity_version: std::sync::Arc<str>, server_name: std::sync::Arc<str>, support_email: std::sync::Arc<str>, time_out_world_id: std::sync::Arc<str>, tutorial_world_id: std::sync::Arc<str>, update_rate_ms_maximum: i32, update_rate_ms_minimum: i32, update_rate_ms_normal: i32, update_rate_ms_udon_manual: i32, upload_analysis_percent: i32, url_list: Vec<std::sync::Arc<str>>, use_reliable_udp_for_voice: bool, user_update_period: i32, user_verification_delay: i32, user_verification_retry: i32, user_verification_timeout: i32, vive_windows_url: std::sync::Arc<str>, white_listed_asset_urls: Vec<std::sync::Arc<str>>, world_update_period: i32, player_url_resolver_hash: std::sync::Arc<str>, player_url_resolver_version: std::sync::Arc<str>) -> ApiConfig {
        ApiConfig {
            voice_enable_degradation,
            voice_enable_receiver_limiting,
            address,
            announcements,
            app_name,
            build_version_tag,
            client_api_key,
            client_bps_ceiling,
            client_disconnect_timeout,
            client_reserved_player_bps,
            client_sent_count_allowance,
            contact_email,
            copyright_email,
            current_tos_version,
            default_avatar,
            deployment_group,
            dev_app_version_standalone,
            dev_download_link_windows,
            dev_sdk_url,
            dev_sdk_version,
            dev_server_version_standalone,
            dis_countdown,
            disable_avatar_copying,
            disable_avatar_gating,
            disable_community_labs,
            disable_community_labs_promotion,
            disable_email,
            disable_event_stream,
            disable_feedback_gating,
            disable_frontend_builds,
            disable_hello,
            disable_oculus_subs,
            disable_registration,
            disable_steam_networking,
            disable_two_factor_auth,
            disable_udon,
            disable_upgrade_account,
            download_link_windows,
            download_urls: Box::new(download_urls),
            dynamic_world_rows,
            events: Box::new(events),
            gear_demo_room_id,
            home_world_id,
            homepage_redirect_target,
            hub_world_id,
            jobs_email,
            message_of_the_day,
            moderation_email,
            moderation_query_period,
            not_allowed_to_select_avatar_in_private_world_message,
            plugin,
            release_app_version_standalone,
            release_sdk_url,
            release_sdk_version,
            release_server_version_standalone,
            sdk_developer_faq_url,
            sdk_discord_url,
            sdk_not_allowed_to_publish_message,
            sdk_unity_version,
            server_name,
            support_email,
            time_out_world_id,
            tutorial_world_id,
            update_rate_ms_maximum,
            update_rate_ms_minimum,
            update_rate_ms_normal,
            update_rate_ms_udon_manual,
            upload_analysis_percent,
            url_list,
            use_reliable_udp_for_voice,
            user_update_period,
            user_verification_delay,
            user_verification_retry,
            user_verification_timeout,
            vive_windows_url,
            white_listed_asset_urls,
            world_update_period,
            player_url_resolver_hash,
            player_url_resolver_version,
        }
    }
}


