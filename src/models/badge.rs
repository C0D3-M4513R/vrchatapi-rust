/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Badge {
    /// only present in CurrentUser badges
    #[serde(rename = "assignedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assigned_at: Option<Option<std::sync::Arc<str>>>,
    #[serde(rename = "badgeDescription")]
    pub badge_description: std::sync::Arc<str>,
    #[serde(rename = "badgeId")]
    pub badge_id: std::sync::Arc<str>,
    /// direct url to image
    #[serde(rename = "badgeImageUrl")]
    pub badge_image_url: std::sync::Arc<str>,
    #[serde(rename = "badgeName")]
    pub badge_name: std::sync::Arc<str>,
    /// only present in CurrentUser badges
    #[serde(rename = "hidden", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<Option<bool>>,
    #[serde(rename = "showcased")]
    pub showcased: bool,
    /// only present in CurrentUser badges
    #[serde(rename = "updatedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<std::sync::Arc<str>>>,
}

impl Badge {
    pub fn new(badge_description: std::sync::Arc<str>, badge_id: std::sync::Arc<str>, badge_image_url: std::sync::Arc<str>, badge_name: std::sync::Arc<str>, showcased: bool) -> Badge {
        Badge {
            assigned_at: None,
            badge_description,
            badge_id,
            badge_image_url,
            badge_name,
            hidden: None,
            showcased,
            updated_at: None,
        }
    }
}


