/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateAvatarRequest {
    #[serde(rename = "assetUrl", skip_serializing_if = "Option::is_none")]
    pub asset_url: Option<std::sync::Arc<str>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<std::sync::Arc<str>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<std::sync::Arc<str>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<std::sync::Arc<str>>,
    ///  
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<std::sync::Arc<str>>>,
    #[serde(rename = "imageUrl", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<std::sync::Arc<str>>,
    #[serde(rename = "releaseStatus", skip_serializing_if = "Option::is_none")]
    pub release_status: Option<crate::models::ReleaseStatus>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f32>,
    #[serde(rename = "unityPackageUrl", skip_serializing_if = "Option::is_none")]
    pub unity_package_url: Option<std::sync::Arc<str>>,
    #[serde(rename = "unityVersion", skip_serializing_if = "Option::is_none")]
    pub unity_version: Option<std::sync::Arc<str>>,
}

impl UpdateAvatarRequest {
    pub fn new() -> UpdateAvatarRequest {
        UpdateAvatarRequest {
            asset_url: None,
            id: None,
            name: None,
            description: None,
            tags: None,
            image_url: None,
            release_status: None,
            version: None,
            unity_package_url: None,
            unity_version: None,
        }
    }
}


