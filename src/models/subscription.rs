/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

/// Subscription : 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscription {
    #[serde(rename = "id")]
    pub id: std::sync::Arc<str>,
    #[serde(rename = "steamItemId")]
    pub steam_item_id: std::sync::Arc<str>,
    #[serde(rename = "oculusSku", skip_serializing_if = "Option::is_none")]
    pub oculus_sku: Option<std::sync::Arc<str>>,
    #[serde(rename = "googleProductId", skip_serializing_if = "Option::is_none")]
    pub google_product_id: Option<std::sync::Arc<str>>,
    #[serde(rename = "googlePlanId", skip_serializing_if = "Option::is_none")]
    pub google_plan_id: Option<std::sync::Arc<str>>,
    #[serde(rename = "picoSku", skip_serializing_if = "Option::is_none")]
    pub pico_sku: Option<std::sync::Arc<str>>,
    #[serde(rename = "amount")]
    pub amount: f32,
    #[serde(rename = "description")]
    pub description: std::sync::Arc<str>,
    #[serde(rename = "period")]
    pub period: crate::models::SubscriptionPeriod,
    #[serde(rename = "tier")]
    pub tier: f32,
}

impl Subscription {
    /// 
    pub fn new(id: std::sync::Arc<str>, steam_item_id: std::sync::Arc<str>, amount: f32, description: std::sync::Arc<str>, period: crate::models::SubscriptionPeriod, tier: f32) -> Subscription {
        Subscription {
            id,
            steam_item_id,
            oculus_sku: None,
            google_product_id: None,
            google_plan_id: None,
            pico_sku: None,
            amount,
            description,
            period,
            tier,
        }
    }
}


